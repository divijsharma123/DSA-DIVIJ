
/*
LINK : https://leetcode.com/problems/max-value-of-equation/

PROBLEM STATEMENT:

You are given an array points containing the coordinates of points on a 2D plane, sorted by the x-values, where points[i] = [xi, yi] such that xi < xj for all 1 <= i < j <= points.length. You are also given an integer k.

Return the maximum value of the equation yi + yj + |xi - xj| where |xi - xj| <= k and 1 <= i < j <= points.length.

It is guaranteed that there exists at least one pair of points that satisfy the constraint |xi - xj| <= k.

 

Example 1:

Input: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1
Output: 4
Explanation: The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.
No other pairs satisfy the condition, so we return the max of 4 and 1.
Example 2:

Input: points = [[0,0],[3,0],[9,2]], k = 3
Output: 3
Explanation: Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3.
 

Constraints:

2 <= points.length <= 10^5
points[i].length == 2
-10^8 <= xi, yi <= 10^8
0 <= k <= 2 * 10^8
xi < xj for all 1 <= i < j <= points.length
xi form a strictly increasing sequence.

*/


/*
Solution: Using Deque
TIME COMPLEXITY: O(n)
SPACE COMPEXITY : O(n)
*/


class Solution {
    public int findMaxValueOfEquation(int[][] points, int k) {
     
        int i = 0;
        int j = 1;
        
        int n = points.length;
        
        // we will use deque like in : https://leetcode.com/problems/sliding-window-maximum/
        Deque<Integer> dq = new ArrayDeque<Integer>();
        
        int max_eqn_val = Integer.MIN_VALUE;
        
        /* one important observation for this logic
        for any pair(pi) if we want to find another pair(pj) in window (pj.x - pi.x)<=k
        To find max value of (pj.x-pi.x) + (pj.y + pi.y) ,we need to find pj such that (pj.x + pj.y)
        is maximum among all pairs pj in the window , so we are maintaining this order using deque 
        */
        
        while(i<n) 
        {   
            // finding best possible pj for pi in window and maintainig the order in deque
            while(j<n)
            {
                if( (points[j][0] - points[i][0])>k)
                  { 
                      break;
                  }
              while( (!dq.isEmpty()) && (points[dq.getLast()][0] + points[dq.getLast()][1] < points[j][0] + points[j][1] ) )
              {
                  dq.removeLast();
              }
                dq.addLast(j);
                j++;
            }
            // finding best possible value using (pi and pj (from the deque))
            if(!dq.isEmpty())
            { max_eqn_val = Math.max(max_eqn_val , (points[dq.getFirst()][0] - points[i][0] + points[dq.getFirst()][1] + points[i][1]));
            }
            
            // removing from the front from deque till pi (ith pair) is removed and we do not consider this value again for next coming pi
            i++;           
            while( (!dq.isEmpty())  && (dq.getFirst() <=i) )
            {
                dq.removeFirst();
            } 
            
            if(i==j)
            {
                j++;
            }
        }
        
        return max_eqn_val;
    }
}