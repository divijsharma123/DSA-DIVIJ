/* 
LINK :
https://leetcode.com/problems/sliding-window-maximum/
*/

/*
PROBLEM STATEMENT:
You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4
1 <= k <= nums.length
*/


/*
Solution 1: Using TreeMap
Time Compexity: O( (n-k+1) * log(k) ) turns outs to O(n * log(n)) in cases when k is comparable to n
Space Complexity : O(K)
*/

class Solution {
       
    public int[] maxSlidingWindow(int[] nums, int k) {
        
        TreeMap<Integer,Integer> nums_freq_map = new TreeMap<Integer,Integer>
                                                  (
                                                  // keys in descending order
                                                  new Comparator<Integer>()
                                                         {
                                                         public int compare(Integer i1 , Integer i2)
                                                         {
                                                             return -i1.compareTo(i2);
                                                         }
                                                 });
        
        int n = nums.length;
        int[] k_window_arr = new int[n-k+1];
        int window_counter = 0;
        
        for(int i=0;i<k;i++)
        {
            if(nums_freq_map.containsKey(nums[i]))
            {
                nums_freq_map.put(nums[i], nums_freq_map.get(nums[i])+1 );
            }
            else{
                nums_freq_map.put(nums[i], 1 );
            }
        }
        
        
       
        for(int i = k;i<=n;i++)
        {
        int max_value = nums_freq_map.firstKey();
        k_window_arr[window_counter++] = max_value;
            
        int nums_i_minus_k_freq = nums_freq_map.get(nums[i-k]);
        if(nums_i_minus_k_freq==1)
        {
            nums_freq_map.remove(nums[i-k]);
        }
        else{
            nums_freq_map.put(nums[i-k],nums_i_minus_k_freq-1);
        }
        
        if(i<n)
        {
        if(nums_freq_map.containsKey(nums[i]))
        {
                nums_freq_map.put(nums[i], nums_freq_map.get(nums[i])+1 );
        }
        else{
                nums_freq_map.put(nums[i], 1 );
        }
        }
            
        }
        
        return k_window_arr;  
        
    }
}


/*
Solution 2: Using Deque
Time Compexity: O(n) 
Space Complexity : O(K)
*/

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        int[] k_window_arr = new int[n-k+1];
        int window_counter = 0;
        Deque<Integer> dq = new ArrayDeque<Integer>();
        
        for(int i=0;i<k;i++)
        {
            while( (!dq.isEmpty()) && (nums[i]>=nums[dq.getLast()]) )
            {
                dq.removeLast();
            }
            dq.addLast(i);
        }
        
        for(int i=k;i<n;i++)
        {
            k_window_arr[window_counter++] = nums[dq.getFirst()];
            
            while( (!dq.isEmpty()) && (dq.getFirst()<=(i-k)) )
            {
                dq.removeFirst();
            }
            
            while( (!dq.isEmpty()) && (nums[i]>=nums[dq.getLast()]) )
            {
                dq.removeLast();
            }
            
            dq.addLast(i);
        }
        
        k_window_arr[window_counter++] = nums[dq.getFirst()];
        
        return k_window_arr;
    
    }
}
