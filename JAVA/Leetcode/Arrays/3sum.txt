https://leetcode.com/problems/3sum/

/* PROBLEM STATEMENT
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 
Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:
Input: nums = [0,1,1]
Output: []

Explanation: The only possible triplet does not sum up to 0.

Example 3:
Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 

Constraints:

3 <= nums.length <= 3000
-10^5 <= nums[i] <= 10^5
*/


/*
Solution1
(Using Sorting) 
Time : O(NlogN + N^2)
SPACE : O(1)
*/

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
        Arrays.sort(nums);
        List<List<Integer>> triplets = new ArrayList<List<Integer>>();
        
          
        if(nums[0]>0)
        {
            return triplets;
        }
        
        int i = 0;
        int n = nums.length;
        
        while(i<n)
        {   // if starting num of triplet in greater than 0 then no triplets we will get
            if(nums[i]>0)
            {
                return triplets;
            }
                        
            // nums[i] < 0 , then there are posibilities of triplets going forward
            else{
                // twoSum find for -nums[i]
                int l = i+1;
                int r = n-1;
                
                while(l<r)
                {
                    int sum =  nums[l] + nums[r];
                    // two Sum pair found
                    if(sum==(-nums[i]))
                    {
                        List<Integer> triplet = Arrays.asList(nums[i],nums[l],nums[r]);
                        triplets.add(triplet);
                    
                    // for removing duplicacy in terms of same pairs found
                    while( ((l+1)<r) && (nums[l+1]==nums[l]) )
                    {
                        l++;
                    }
                    
                    while( (l<(r-1)) && (nums[r-1]==nums[r]) )
                    {
                        r--;
                    }
                    l++;
                    r--;
                    }
                    
                    
                    else if(sum > (-nums[i]))
                    {
                        r--;
                    }
                    
                    else{
                        l++;
                    }                  
                    
                }
                
                // removing duplicacy of triplets starting with nums[i] again
                while( (i+1<n) && (nums[i+1]==nums[i]) )
                {
                    i++;
                }
                
                // incrementing from last occurance of nums[i]
                i++;
            }
            
        }
        return triplets;
        
    }
}


/*
advancement in question:
if asked nums[i] + nums[j] + nums[k] = target with same constraints
(Using Sorting) 
Time : O(NlogN + N^2)
SPACE : O(1)
*/



class Solution {

    public List<List<Integer>> threeSumEqaulsTarget(int[] nums,int target)
    {   Arrays.sort(nums);

        List<List<Integer>> triplets= new ArrayList<List<Integer>>();
        
        // maximum nums[i] posssible in triplet
        double target_d = target;
        int max_num = (int)Math.floor(target_d/3.0);
        
        if(nums[0]>max_num)
        {
            return triplets;
        }
        
        int i = 0;
        int n = nums.length;
        
        while(i<n)
        {   // if starting num of triplet in greater than max_num then no triplets we will get
            if(nums[i]>max_num)
            {
                return triplets;
            }
            
            
            // nums[i] < max_num , then there are posibilities of triplets going forward
            else{
                // twoSum find for (target-nums[i])
                int l = i+1;
                int r = n-1;
                
                while(l<r)
                {
                    int sum =  nums[l] + nums[r];
                    // two Sum pair found
                    if(sum==(target-nums[i]))
                    {
                        List<Integer> triplet = Arrays.asList(nums[i],nums[l],nums[r]);
                        triplets.add(triplet);
                    
                    // for removing duplicacy in terms of same pairs found
                    while( ((l+1)<r) && (nums[l+1]==nums[l]) )
                    {
                        l++;
                    }
                    
                    while( (l<(r-1)) && (nums[r-1]==nums[r]) )
                    {
                        r--;
                    }
                    l++;
                    r--;
                    }
                    
                    
                    else if(sum > (target-nums[i]))
                    {
                        r--;
                    }
                    
                    else{
                        l++;
                    }                  
                    
                }
                
                // removing duplicacy of triplets starting with nums[i] again
                while( (i+1<n) && (nums[i+1]==nums[i]) )
                {
                    i++;
                }
                
                // incrementing from last occurance of nums[i]
                i++;
            }
            
        }
        return triplets;
   
    }
    
}

