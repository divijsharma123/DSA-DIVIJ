// https://leetcode.com/problems/two-sum/

// Solution1 (Sorting):

class Pair implements Comparable<Pair>
{
    private int index;
    private int val;
    public Pair(int i,int v)
    {
        this.index=i;
        this.val=v;
    }

    @Override
    public int compareTo(Pair p)
    {
        return (this.val)-(p.val);
    }
    
    @Override
    public String toString()
    {
        return "(INDEX:" + this.index + " ," + "VALUE: " + this.val + ")";
    }
    
    public int get_index()
    {
    return this.index;
    }
    
    public int get_val()
    {
    return this.val;
    }
}



class Solution {
    public int[] twoSum(int[] nums, int target) {
    ArrayList<Pair> arr = new ArrayList<Pair>(); 
    int i=0;     
    for(int num:nums)
    {   
        arr.add(new Pair(i,num));
        i++;
    }
    Collections.sort(arr);
            
        int l = 0;
        int r = nums.length -1;
        
        while(l<r)
        { int l_index = arr.get(l).get_index();
          int l_val = arr.get(l).get_val();
          
          int r_index = arr.get(r).get_index();
          int r_val = arr.get(r).get_val();      
          
        int sum = l_val + r_val;
            if(sum==target)
            {
                return new int[]{l_index,r_index};
            }
            if(sum>target)
            {
                r--;
            }
         else{
             l++;
         }
        }
        
        return new int[2];
        
    }
}

//Solution 2 (Map: 2 iterations):
class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        HashMap<Integer,Integer> index_to_val = new HashMap<Integer,Integer>();
        
        for(int i=0;i<nums.length;i++)
        {
            index_to_val.put(nums[i],i);
        }
        int i=0;
        for(int num:nums)
        {   
            if(index_to_val.containsKey(target-nums[i]) && index_to_val.get(target-nums[i])!=i)
            {
                return new int[]{i,index_to_val.get(target-nums[i])};
            }
            i++;
        }
        
        return new int[2];
        
    }
}

//Solution 3 (Map: 1 iteration):

class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        HashMap<Integer,Integer> index_to_val = new HashMap<Integer,Integer>();
        
        for(int i=0;i<nums.length;i++)
        {  
            if(index_to_val.containsKey(nums[i]))
        {
            return new int[]{index_to_val.get(nums[i]),i};
        }
        else
        {
            index_to_val.put(target-nums[i],i);
        }
        }

        return new int[2];
        
    }
}

// If values can be repeated in array and 
// we need to find valid ordered pairs of indices such that (numsi + numsj = target)

import java.io.*;
import java.util.*;
class Pair implements Comparable<Pair>
{
    private int l_index;
    private int r_index;
    
    public Pair(int l,int r)
    {
        this.l_index = l;
        this.r_index = r;
    }
    
    @Override
    public String toString()
    {
        return "( " + this.l_index + ", " + this.r_index + " )"; 
    }

    @Override
    public int compareTo(Pair p)
    {
        if(this.l_index != p.l_index)
        {
            if(this.l_index > p.l_index)
            {
                return 1;
            }
            return -1;
        }

        else if(this.r_index != p.r_index)
        {
            if(this.r_index > p.r_index)
            {
                return 1;
            }
            return -1;
        }
        return 0;
    }
}

class Solution {
    
    public static void printOrderedPairsIndices( HashMap<Integer, ArrayList<Integer>> value_to_indices_map, int target)
    {
         Set<Map.Entry<Integer,ArrayList<Integer>>> value_to_indices_entries = new HashSet();
        value_to_indices_entries = value_to_indices_map.entrySet();
        if(value_to_indices_map.isEmpty())
        {
            System.out.println("MAP SIZE IS 0");
            return;
        }
 

        ArrayList<Pair> ordered_pairs = new ArrayList<>();

        HashSet<Integer> value_check_set = new HashSet<>();

        for(Map.Entry<Integer,ArrayList<Integer>> it:value_to_indices_entries)
        {   Integer num = it.getKey();
            ArrayList<Integer> indices = it.getValue();
            System.out.println(num + "->" + indices);
            if(2*num == target)
            {
                for(int i=0;i<indices.size();i++)
                {
                    for(int j=i+1;j<indices.size();j++)
                    {
                        ordered_pairs.add(new Pair(indices.get(i), indices.get(j)));
                    }
                }
            }

            else if (value_check_set.contains(num))
            {
                ArrayList<Integer> indices_second = value_to_indices_map.get(target-num);
                for(int i=0;i<indices.size();i++)
                {
                    for(int j=0;j<indices_second.size();j++)
                    {
                        ordered_pairs.add(new Pair(Math.min(indices.get(i),indices_second.get(j)), Math.max(indices.get(i),indices_second.get(j))));
                    }
                }
            }

            else{
                value_check_set.add(target - num);
            }


            }

        
        Collections.sort(ordered_pairs);

        System.out.println("Ordered pairs of indices:");
        for(Pair p : ordered_pairs)
        {
            System.out.println(p);
        }
        System.out.println("*********************************************");
       
    }

    public static void printCounts(HashMap<Integer,Integer> value_to_freq_map,int target){
        Set<Map.Entry<Integer,Integer>> value_to_freq_entries = new HashSet<>();
        value_to_freq_entries = value_to_freq_map.entrySet();
        
        int count_ordered_pairs = 0;

        HashSet<Integer> value_check_set = new HashSet<>();

        for(Map.Entry<Integer,Integer> it: value_to_freq_entries)
        {
            int num = it.getKey();
            int num_freq = it.getValue();
            System.out.println(num + "->" + num_freq);
            if(2*num == target)
            {
              count_ordered_pairs += ((num_freq)*(num_freq -1))/2;     
            }
            else if(value_check_set.contains(num)){
            int target_minus_num_freq = value_to_freq_map.get(target - num);
            count_ordered_pairs += (num_freq * target_minus_num_freq);
            }
            else{
                value_check_set.add(target - num);
            }

        }
        System.out.println("Total number of Ordered pairs : " + count_ordered_pairs);

    }

    public static void twoSum(int[] nums, int target) {
        
        HashMap<Integer,ArrayList<Integer>> value_to_indices_map = new HashMap<Integer, ArrayList<Integer>>();
        HashMap<Integer,Integer> value_to_freq_map = new HashMap<Integer, Integer>();  
        
        for(int i=0;i<nums.length;i++)
        {
            if(value_to_indices_map.containsKey(nums[i]))
            {
            value_to_indices_map.get(nums[i]).add(i);
            value_to_freq_map.put(nums[i],value_to_freq_map.get(nums[i])+1);
            }
            else{
            ArrayList<Integer> arr = new ArrayList<Integer>();
            arr.add(i);
            value_to_indices_map.put(nums[i],arr);
            value_to_freq_map.put(nums[i],1);
            }
        }
        
      printOrderedPairsIndices(value_to_indices_map,target);
      printCounts(value_to_freq_map,target);
        
    }

    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);

        String[] arr =  sc.nextLine().split(" ");

        int [] nums = new int[arr.length];

        for(int i=0;i<arr.length;i++)
        {
            nums[i] = Integer.valueOf(arr[i]);
        }
        

        int target = sc.nextInt();
        twoSum(nums, target);
        sc.close();
    }
}

/*
INPUT:
1 1 3 3 1 2 2 2 2 4 4 0 0
4

OUTPUT:
0->[11, 12]
1->[0, 1, 4]
2->[5, 6, 7, 8]
3->[2, 3]
4->[9, 10]
Ordered pairs of indices:
( 0, 2 )
( 0, 3 )
( 1, 2 )
( 1, 3 )
( 2, 4 )
( 3, 4 )
( 5, 6 )
( 5, 7 )
( 5, 8 )
( 6, 7 )
( 6, 8 )
( 7, 8 )
( 9, 11 )
( 9, 12 )
( 10, 11 )
( 10, 12 )
*********************************************
0->2
1->3
2->4
3->2
4->2
Total number of Ordered pairs : 16

 */



