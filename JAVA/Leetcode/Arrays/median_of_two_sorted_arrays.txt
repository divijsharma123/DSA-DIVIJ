// https://leetcode.com/problems/median-of-two-sorted-arrays/

/*
PROBLEM STATEMENT:

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106
*/

// Solution1 : O(m+n)= time , O(1) = space
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int nums1_len = nums1.length;
        int nums2_len = nums2.length;
        int total_length = nums1_len + nums2_len;
        
        // if total_length is odd
        if(total_length%2 !=0)
        {
            int median_pos = (total_length+1)/2 ;
            int i=0;
            int j=0;
            int k=0;
            while( (i<nums1_len) && (j<nums2_len) )
            {   
                int element = 0;
                if(nums1[i]<=nums2[j])
                {   element = nums1[i];
                    i++;
                    k++;
                }
                else{
                    element = nums2[j];
                    j++;
                    k++;
                }
                if(k==median_pos)
                {
                    return (double)(element*1.0);
                }
            }
            
            while(i<nums1_len)
            {  int element = nums1[i];
                i++;
                k++;
                if(k==median_pos)
                {
                    return (double)(element*1.0);
                }
            }
            
            while(j<nums2_len)
            {  int element = nums2[j];
                j++;
                k++;
                if(k==median_pos)
                {
                    return (double)(element*1.0);
                }
            }
                
            return -1;
        }
        
        // if total_length is even
        else{
          
            int median_pos = (total_length>>1);
            int median_pos_plus_1 = median_pos +1;
            double med1=0;
            double med2=0;
            
            int i=0;
            int j=0;
            int k=0;
            while( (i<nums1_len) && (j<nums2_len) )
            {   
                int element = 0;
                if(nums1[i]<=nums2[j])
                {   element = nums1[i];
                    i++;
                    k++;
                }
                else{
                    element = nums2[j];
                    j++;
                    k++;
                }
                if(k==median_pos)
                {
                    med1=element;
                }
                else if(k==median_pos_plus_1)
                {
                    med2 = element;
                    return (med1+med2)/2.0;
                }
            }
            
            while(i<nums1_len)
            {  int element = nums1[i];
                i++;
                k++;
                if(k==median_pos)
                {
                    med1=element;
                }
                else if(k==median_pos_plus_1)
                {
                    med2 = element;
                    return (med1+med2)/2.0;
                }
            }
            
            while(j<nums2_len)
            {  int element = nums2[j];
                j++;
                k++;
             
                 if(k==median_pos)
                {
                    med1=element;
                }
                else if(k==median_pos_plus_1)
                {
                    med2 = element;
                    return (med1+med2)/2.0;
                }
            }
                
            return -1;
            
            
        }
        
    }
}