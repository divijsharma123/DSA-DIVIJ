// lower bound = greatest element less than x
// upper bound = lowest element greater than x

// they are useful to find the appropriate position of new element to be inserted in sorted array

import java.io.*;
import java.util.*;

class Main {
	
    public static void show_arr(int[] arr)
    {  
        for(int x:arr)
        {
            System.out.print(x + " ");
        }
        System.out.println();
     System.out.println("*************************");
    }
  
    // lower bound iterative
    public static int lower_bound(int[] arr,int l,int r,int e)
    {
        while(l<=r)
        {
         int mid = (l + r)/2;
         if(arr[mid]>=e)
        {
            if(mid-1<l)
            {
                 return -1;
            }
             
             if(arr[mid-1]<e)
             {
                 return mid-1;
             }
             r = mid -1;            
        }
       
        else{
            if(mid+1>r)
            {
                return mid;
            }
            if(arr[mid+1]>=e)
            {
                return mid;
            }
            l = mid+1;
        }
    }
        return -1;
        
       
    }

    
    // upper bound iterative
    public static int upper_bound(int[] arr,int l,int r,int e)
    {
        while(l<=r)
        {
         int mid = (l + r)/2;
         if(arr[mid]<=e)
        {
            if(mid+1>r)
            {
                 return r+1;
            }
             
             if(arr[mid+1]>e)
             {
                 return mid+1;
             }
             l = mid + 1;            
        }
       
        else{
            if(mid-1<l)
            {
                return mid;
            }
            if(arr[mid-1]<e)
            {
                return mid;
            }
            r = mid-1;
        }
    }
        
        return r+1;      
       
    }


	// Main Method
	public static void main(String[] args)    
	{   
    Scanner sc = new Scanner(System.in);
       

    String string_input = sc.nextLine();
    String[] string_arr = string_input.split(" ");
    int n = string_arr.length;
    int[] arr = new int[n];
    for(int i=0;i<n;i++)
    {
        arr[i] = Integer.valueOf(string_arr[i]);
    }
        
    System.out.println("input array contents");
    show_arr(arr);
    
    while(sc.hasNext())
    {
    int element = sc.nextInt();
        
    
     // lower_bound
     int lb_index = lower_bound(arr,0,n-1,element);
     if(lb_index==-1)
     {
         System.out.println("lower bound of: "+ element + " is at index: " + "-1 , which means it is smallest of all array elements");
     }
    else
    {
         System.out.println("lower bound of: "+ element + " is at index:" + lb_index + " which is: " +arr[lb_index]);
    }
       
    // upper_bound
     int ub_index = upper_bound(arr,0,n-1,element);
     if(ub_index==n)
     {
         System.out.println("upper bound of: "+ element + " is at index: " + n + " which means this element is greatest of all array elements");
     }
    else
    {
         System.out.println("upper bound of: "+ element + " is at index:" + ub_index + " which is: " +arr[ub_index]);
    }
        
    }
        
        
    }
}

--------------------------------------------------------------------------------------------------------

INPUT:
1 1 1 2 2 3 5 5 6 7 8 8 10
4
3
100
6
1

OUTPUT:
input array contents
1 1 1 2 2 3 5 5 6 7 8 8 10 
*************************
lower bound of: 4 is at index:5 which is: 3
upper bound of: 4 is at index:6 which is: 5
lower bound of: 3 is at index:4 which is: 2
upper bound of: 3 is at index:6 which is: 5
lower bound of: 100 is at index:12 which is: 10
upper bound of: 100 is at index: 13 which means this element is greatest of all array elements
lower bound of: 6 is at index:7 which is: 5
upper bound of: 6 is at index:9 which is: 7
lower bound of: 1 is at index: -1 , which means it is smallest of all array elements
upper bound of: 1 is at index:3 which is: 2
